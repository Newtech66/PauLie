Second-order twirl and quadratic symmetries
===========================================

Let :math:`G` be a Lie group that admits a :math:`t`-fold tensor representation. Consider the following map defined via an integral:

.. math::

    \mathcal{T}^{(t)}_{G}(M) = \int_{G}{dU U^{\otimes t}M{U^{\otimes t}}^{\dagger}}

where the unitaries :math:`U` are distributed by the Haar measure on :math:`G`. This is referred to as the :math:`t^{\text{th}}`-order twirl of the operator :math:`M`. It is known that this map admits a solution via projection onto the basis of the :math:`t^{\text{th}}`-order commutant of :math:`G`:

.. math::

    \int_{G}{dU U^{\otimes t}M{U^{\otimes t}}^{\dagger}} = \sum_{\eta=1}^{\text{dim(comm(}G^{\otimes t}\text{))}} \text{Tr}\left[B_{\eta}^{(t)} M\right]B_{\eta}^{(t)}

where the commutant is defined as:

.. math::

    \text{comm(}G^{\otimes t}\text{)} = \{ A : [A, U^{\otimes t}] = 0 \; \forall \; U \in G] \}


Consider the Lie group :math:`G` to be generated by a Pauli string dynamical Lie algebra (DLA). There is an elegant characterization of the basis of the first-order and second-order commutant of this group. We will refer to elements of the first-order commutant as **linear symmetries** and those of the second-order commutant as **quadratic symmetries** from here on.

:code:`paulie` provides the methods :code:`get_commutants` and :code:`get_quadratic_symmetries` which return a Hermitian, orthonormal basis of the linear symmetries and quadratic symmetries of a Pauli string DLA respectively. :code:`paulie` also provides the method :code:`second_moment` to compute the second-order twirl of an operator with respect to the Lie group generated by a Pauli string DLA.

For example, consider the Pauli string DLA generated by :math:`\langle X \rangle`. We can find the linear and quadratic symmetries:

.. code:: python

    from paulie.common.pauli_string_factory import get_pauli_string as p

    g = p(["X"])
    print('Linear symmetries:')
    print(*g.get_commutants(), sep='\n')
    print('Quadratic symmetries:')
    print(*g.get_quadratic_symmetries(), sep='\n')

which outputs:

.. code:: bash

    Linear symmetries:
    I
    X
    Quadratic symmetries:
    0.5*II
    0.5*IX
    0.35355339059327373*YY + 0.35355339059327373*ZZ
    0.35355339059327373i*YZ - 0.35355339059327373i*ZY
    0.5*XX
    0.5*XI

We can also compute the second-order twirl of an operator:

.. code:: python

    from paulie.application.second_moment import second_moment

    op1 = p([(1, "IX")])
    print('Second-order twirl of IX:', second_moment(g, op1))
    op2 = p([(1, "YY")])
    print('Second-order twirl of YY:', second_moment(g, op2))
    op3 = p([(1, "YZ"), (-1, "ZY")])
    print('Second-order twirl of YZ - ZY:', second_moment(g, op3))

which outputs:

.. code:: bash

    Second-order twirl of IX: - 0.0*II + IX - 0.0*ZZ - 0.0*YY - 0.0*ZY - 0.0*YZ - 0.0*XX - 0.0*XI
    Second-order twirl of YY: - 0.0*II - 0.0*IX + 0.4999999999999999*ZZ + 0.4999999999999999*YY - 0.0*ZY - 0.0*YZ - 0.0*XX - 0.0*XI
    Second-order twirl of YZ - ZY: - 0.0*II - 0.0*IX - 0.0*ZZ - 0.0*YY + ZY - YZ - 0.0*XX - 0.0*XI