"""
    Computes the second-order twirl of an operator M over a group G.
"""

def second_moment(
    operator: PauliStringLinear,
    generators: PauliStringCollection
) -> PauliStringLinear:
    """
    Returns the second-order twirl of operator over the dynamical
    Lie algebra generated by generators.

    Args:
        operator: Operator to compute the second-order twirl of.
        generators: Generators of the dynamical Lie algebra.
    """
    # We require sum_i Tr(Q[i] @ M) Q[i]
    quadratic_symmetries = generators.get_quadratic_symmetries()
    twirl = PauliStringLinear([])
    for quadsym in quadratic_symmetries:
        # Seems like a slow step
        # Could be optimized by implementing += for PauliStringLinear
        twirl = twirl + (quadsym @ operator).trace() * quadsym
    return twirl
