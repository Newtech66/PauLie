"""
    Computes the second-order twirl of an operator M over a group G.
"""
from paulie.common.pauli_string_linear import PauliStringLinear
from paulie.common.pauli_string_collection import PauliStringCollection

def second_moment(
    generators: PauliStringCollection,
    operator: PauliStringLinear
) -> PauliStringLinear:
    """
    Returns the second-order twirl of operator over the dynamical
    Lie algebra generated by generators.

    Args:
        generators: Generators of the dynamical Lie algebra.
        operator: Operator to compute the second-order twirl of.
    """
    # We require sum_i Tr(Q[i] @ M) Q[i]
    quadratic_symmetries = generators.get_quadratic_symmetries()
    twirl = PauliStringLinear([])
    for quadsym in quadratic_symmetries:
        # (quadsym @ operator).trace() * quadsym will not work
        # because of some Python arithmetic weirdness
        quadsym *= (quadsym @ operator).trace()
        twirl += quadsym
    return twirl
